"use strict";(self.webpackChunkmcphub_docs=self.webpackChunkmcphub_docs||[]).push([[344],{3995:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"advanced/langchain-integration","title":"Using MCPHub with LangChain","description":"Learn how to integrate your MCPHub-deployed MCP servers with LangChain for powerful AI applications using Python.","source":"@site/docs/advanced/langchain-integration.md","sourceDirName":"advanced","slug":"/advanced/langchain-integration","permalink":"/mcphub-docs/docs/latest/advanced/langchain-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/mahesh-rajamani/mcphub-docs/tree/main/docs/advanced/langchain-integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Deployment Management","permalink":"/mcphub-docs/docs/latest/creating-mcps/deployment-management"},"next":{"title":"Storage & Encryption","permalink":"/mcphub-docs/docs/latest/advanced/storage-encryption"}}');var s=t(4848),i=t(8453);const o={},a="Using MCPHub with LangChain",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Install Required Packages",id:"step-1-install-required-packages",level:2},{value:"Step 2: Set Up Environment Variables",id:"step-2-set-up-environment-variables",level:2},{value:"Step 3: Download the Sample Code",id:"step-3-download-the-sample-code",level:2},{value:"Step 4: Configure Your Environment",id:"step-4-configure-your-environment",level:2},{value:"Step 5: Run the Demo",id:"step-5-run-the-demo",level:2},{value:"Step 6: Test AI Queries",id:"step-6-test-ai-queries",level:2},{value:"Sample Output",id:"sample-output",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Smart Parameter Mapping",id:"smart-parameter-mapping",level:3},{value:"Closure Issue Fix",id:"closure-issue-fix",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Adding Multiple MCP Servers",id:"adding-multiple-mcp-servers",level:3},{value:"Custom Tool Descriptions",id:"custom-tool-descriptions",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Tool Descriptions",id:"1-tool-descriptions",level:3},{value:"2. Rate Limiting",id:"2-rate-limiting",level:3},{value:"3. Security",id:"3-security",level:3},{value:"4. Performance",id:"4-performance",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Example Applications",id:"example-applications",level:2},{value:"HR Management System",id:"hr-management-system",level:3},{value:"Family Database Management",id:"family-database-management",level:3},{value:"Contact Management",id:"contact-management",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"using-mcphub-with-langchain",children:"Using MCPHub with LangChain"})}),"\n",(0,s.jsx)(n.p,{children:"Learn how to integrate your MCPHub-deployed MCP servers with LangChain for powerful AI applications using Python."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This guide shows you how to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Set up a Python environment with LangChain"}),"\n",(0,s.jsx)(n.li,{children:"Connect to your MCPHub-deployed MCP servers"}),"\n",(0,s.jsx)(n.li,{children:"Use MCP tools as LangChain tools"}),"\n",(0,s.jsx)(n.li,{children:"Build AI applications that can call your APIs"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["MCPHub running with deployed MCPs (",(0,s.jsx)(n.a,{href:"/mcphub-docs/docs/latest/getting-started/quick-install",children:"Quick Install"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Python 3.8+ installed"}),"\n",(0,s.jsx)(n.li,{children:"OpenAI API key"}),"\n",(0,s.jsx)(n.li,{children:"Basic familiarity with Python"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"step-1-install-required-packages",children:"Step 1: Install Required Packages"}),"\n",(0,s.jsx)(n.p,{children:"Create a new Python project and install dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create project directory\nmkdir mcphub-langchain-demo\ncd mcphub-langchain-demo\n\n# Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# On Windows:\nvenv\\Scripts\\activate\n# On macOS/Linux:\nsource venv/bin/activate\n\n# Install required packages\npip install langchain langchain-openai requests python-dotenv\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-2-set-up-environment-variables",children:"Step 2: Set Up Environment Variables"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:".env"})," file in your project directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title=".env"',children:"OPENAI_API_KEY=your_openai_api_key_here\nOPENAI_MODEL=gpt-4\nMCPHUB_BASE_URL=http://localhost:8080\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-3-download-the-sample-code",children:"Step 3: Download the Sample Code"}),"\n",(0,s.jsx)(n.p,{children:"Create the main application file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="mcphub_langchain_demo.py"',children:'#!/usr/bin/env python3\n"""\nMCPHub LangChain Integration Demo\n\nThis script demonstrates how to use MCPHub-deployed MCP servers\nas tools in LangChain applications.\n"""\n\nimport os\nimport json\nimport requests\nfrom typing import List, Dict, Any, Optional\nfrom dotenv import load_dotenv\n\nfrom langchain.tools import Tool\nfrom langchain.agents import AgentType, initialize_agent\nfrom langchain_openai import ChatOpenAI\nfrom langchain.schema import BaseMessage, SystemMessage\n\n# Load environment variables\nload_dotenv()\n\nclass MCPHubTool:\n    """Wrapper for MCPHub MCP tools to use with LangChain"""\n    \n    def __init__(self, mcp_url: str, tool_name: str, tool_info: Dict[str, Any]):\n        self.mcp_url = mcp_url\n        self.tool_name = tool_name\n        self.tool_info = tool_info\n        self.description = tool_info.get(\'description\', f\'Execute {tool_name}\')\n        \n    def execute(self, **kwargs) -> str:\n        """Execute the MCP tool and return results"""\n        try:\n            # Prepare the request payload for MCP protocol\n            payload = {\n                "jsonrpc": "2.0",\n                "id": 1,\n                "method": "tools/call",\n                "params": {\n                    "name": self.tool_name,\n                    "arguments": kwargs\n                }\n            }\n            \n            # Make request to MCP server\n            response = requests.post(\n                self.mcp_url,\n                json=payload,\n                headers={"Content-Type": "application/json"},\n                timeout=30\n            )\n            response.raise_for_status()\n            \n            # Parse MCP response\n            result = response.json()\n            if "error" in result:\n                return f"Error: {result[\'error\'][\'message\']}"\n            \n            # Extract and format the result\n            tool_result = result.get("result", {})\n            if isinstance(tool_result, dict):\n                return json.dumps(tool_result, indent=2)\n            return str(tool_result)\n            \n        except requests.exceptions.RequestException as e:\n            return f"Network error: {str(e)}"\n        except Exception as e:\n            return f"Execution error: {str(e)}"\n\nclass MCPHubIntegration:\n    """Main class for integrating MCPHub with LangChain"""\n    \n    def __init__(self, openai_api_key: str, model_name: str = "gpt-4"):\n        """\n        Initialize MCPHub LangChain integration\n        \n        Args:\n            openai_api_key: Your OpenAI API key\n            model_name: OpenAI model to use (default: gpt-4)\n        """\n        self.llm = ChatOpenAI(\n            api_key=openai_api_key,\n            model=model_name,\n            temperature=0\n        )\n        self.tools = []\n        self.agent = None\n        self.system_prompt = self._create_system_prompt()\n        \n    def _create_system_prompt(self) -> str:\n        """Create a comprehensive system prompt for the AI agent"""\n        return """You are an AI assistant with access to various tools through the Model Context Protocol (MCP).\n\nYour role is to help users interact with different APIs and services by:\n\n1. **Understanding User Intent**: Carefully analyze what the user is asking for\n2. **Tool Selection**: Choose the most appropriate tools from those available to you\n3. **Parameter Handling**: Use the correct parameters and formats when calling tools\n4. **Error Handling**: If a tool call fails, explain the issue and suggest alternatives\n5. **Response Formatting**: Present results in a clear, user-friendly manner\n\nGuidelines for tool usage:\n- Always read tool descriptions carefully before using them\n- Use exact parameter names and types as specified by the tool\n- If you\'re unsure about a parameter, ask the user for clarification\n- Provide helpful context about what each tool does\n- Combine multiple tool calls when needed to answer complex questions\n\nWhen working with data:\n- Format responses clearly and concisely\n- Highlight important information\n- If data seems incomplete or unexpected, mention this to the user\n\nRemember: You have access to real APIs through MCP tools, so your actions can have real effects. Always be careful and confirm with users before making changes to data."""\n        \n    def add_mcp_server(self, mcp_url: str) -> bool:\n        """\n        Add an MCP server and load its tools\n        \n        Args:\n            mcp_url: URL to the MCP server (e.g., http://localhost:8080/swagger-petstore/mcp)\n            \n        Returns:\n            bool: True if successful, False otherwise\n        """\n        try:\n            # Get available tools from MCP server\n            payload = {\n                "jsonrpc": "2.0",\n                "id": 1,\n                "method": "tools/list"\n            }\n            \n            response = requests.post(\n                mcp_url,\n                json=payload,\n                headers={"Content-Type": "application/json"},\n                timeout=10\n            )\n            response.raise_for_status()\n            \n            result = response.json()\n            if "error" in result:\n                print(f"Error loading MCP server {mcp_url}: {result[\'error\'][\'message\']}")\n                return False\n            \n            # Convert MCP tools to LangChain tools\n            mcp_tools = result.get("result", {}).get("tools", [])\n            for tool_info in mcp_tools:\n                tool_name = tool_info["name"]\n                mcp_tool = MCPHubTool(mcp_url, tool_name, tool_info)\n                \n                # Create LangChain tool (capture variables by value to avoid closure issues)\n                def create_tool_func(mcp_tool_instance, current_tool_name, current_tool_info):\n                    def tool_func(*args, **kwargs):\n                        # Handle both string input and kwargs from LangChain\n                        if args and len(args) == 1 and isinstance(args[0], str):\n                            # Try to parse as JSON if it\'s a string\n                            import json\n                            try:\n                                if args[0].strip():\n                                    parsed_args = json.loads(args[0])\n                                    if isinstance(parsed_args, dict):\n                                        kwargs.update(parsed_args)\n                                    else:\n                                        # JSON parsed successfully but not a dict, treat as single parameter\n                                        raise ValueError("Not a dict")\n                                # If empty string or parsing fails, use empty kwargs\n                            except (json.JSONDecodeError, ValueError):\n                                # If not valid JSON dict, try to map to the first required parameter\n                                if args[0].strip():\n                                    # Get the input schema to find the correct parameter name\n                                    input_schema = current_tool_info.get(\'inputSchema\', {})\n                                    properties = input_schema.get(\'properties\', {})\n                                    required = input_schema.get(\'required\', [])\n                                    \n                                    # Use the first required parameter if available\n                                    if required and required[0] in properties:\n                                        kwargs = {required[0]: args[0]}\n                                    # Otherwise use the first parameter\n                                    elif properties:\n                                        first_param = list(properties.keys())[0]\n                                        kwargs = {first_param: args[0]}\n                                    # If no parameters defined, leave kwargs empty (don\'t create artificial parameters)\n                        \n                        return mcp_tool_instance.execute(**kwargs)\n                    return tool_func\n                \n                langchain_tool = Tool(\n                    name=tool_name,\n                    description=mcp_tool.description,\n                    func=create_tool_func(mcp_tool, tool_name, tool_info)\n                )\n                \n                self.tools.append(langchain_tool)\n                print(f"Added tool: {tool_name}")\n            \n            print(f"Successfully loaded {len(mcp_tools)} tools from {mcp_url}")\n            return True\n            \n        except Exception as e:\n            print(f"Failed to load MCP server {mcp_url}: {str(e)}")\n            return False\n    \n    def initialize_agent(self):\n        """Initialize the LangChain agent with loaded tools"""\n        if not self.tools:\n            raise ValueError("No tools loaded. Add at least one MCP server first.")\n        \n        # Add system prompt as agent kwargs\n        agent_kwargs = {\n            "system_message": self.system_prompt\n        }\n        \n        self.agent = initialize_agent(\n            tools=self.tools,\n            llm=self.llm,\n            agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n            verbose=True,\n            handle_parsing_errors=True,\n            agent_kwargs=agent_kwargs\n        )\n        print(f"Agent initialized with {len(self.tools)} tools and system prompt")\n    \n    def query(self, question: str) -> str:\n        """\n        Ask the AI agent a question\n        \n        Args:\n            question: Natural language question\n            \n        Returns:\n            str: Agent\'s response\n        """\n        if not self.agent:\n            raise ValueError("Agent not initialized. Call initialize_agent() first.")\n        \n        try:\n            # Use invoke instead of deprecated run method\n            response = self.agent.invoke({"input": question})\n            # Extract the output from the response\n            if isinstance(response, dict) and "output" in response:\n                return response["output"]\n            return str(response)\n        except Exception as e:\n            return f"Error processing query: {str(e)}"\n    \n    def get_available_tools(self) -> List[str]:\n        """Get list of available tool names and descriptions"""\n        tool_info = []\n        for tool in self.tools:\n            tool_info.append(f"- {tool.name}: {tool.description}")\n        return tool_info\n\ndef main():\n    """Main function to demonstrate MCPHub + LangChain integration"""\n    \n    # Configuration\n    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")\n    OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4")\n    MCPHUB_BASE_URL = os.getenv("MCPHUB_BASE_URL", "http://localhost:8080")\n    \n    # Validate configuration\n    if not OPENAI_API_KEY:\n        print("Error: OPENAI_API_KEY not found in environment variables")\n        print("Please set your OpenAI API key in the .env file")\n        return\n    \n    print("\ud83d\ude80 MCPHub + LangChain Integration Demo")\n    print("=" * 50)\n    \n    # Initialize integration\n    integration = MCPHubIntegration(OPENAI_API_KEY, OPENAI_MODEL)\n    \n    # Add MCP servers (modify these URLs based on your deployed MCPs)\n    mcp_urls = [\n        f"{MCPHUB_BASE_URL}/default/person-rest-oauth/mcp",\n        # Add more MCP URLs here as needed\n        # f"{MCPHUB_BASE_URL}/default/your-other-mcp/mcp",\n    ]\n    \n    print("\\n\ud83d\udce1 Loading MCP servers...")\n    for url in mcp_urls:\n        print(f"Loading: {url}")\n        integration.add_mcp_server(url)\n    \n    # Initialize agent\n    print("\\n\ud83e\udd16 Initializing AI agent...")\n    try:\n        integration.initialize_agent()\n    except ValueError as e:\n        print(f"Error: {e}")\n        return\n    \n    # Show available tools\n    print("\\n\ud83d\udd27 Available Tools:")\n    available_tools = integration.get_available_tools()\n    for tool_info in available_tools:\n        print(f"  {tool_info}")\n    \n    # Interactive demo\n    print("\\n\u2728 Ready for questions! Type \'quit\' to exit.")\n    print("\\nExample queries:")\n    print("- \'Create a person named John Doe with email john@example.com\'")\n    print("- \'Get all persons from the system\'")\n    print("- \'Find a person by the name John\'")\n    print("- \'What tools are available to me?\'")\n    print("- \'Create a person with family information including spouse and children\'")\n    \n    while True:\n        try:\n            question = input("\\n\u2753 Your question: ").strip()\n            \n            if question.lower() in [\'quit\', \'exit\', \'q\']:\n                print("\ud83d\udc4b Goodbye!")\n                break\n            \n            if not question:\n                continue\n            \n            print("\\n\ud83e\udd14 Thinking...")\n            response = integration.query(question)\n            print(f"\\n\ud83d\udca1 Response: {response}")\n            \n        except KeyboardInterrupt:\n            print("\\n\ud83d\udc4b Goodbye!")\n            break\n        except Exception as e:\n            print(f"\\n\u274c Error: {e}")\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"step-4-configure-your-environment",children:"Step 4: Configure Your Environment"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Get your OpenAI API key"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Visit ",(0,s.jsx)(n.a,{href:"https://platform.openai.com/api-keys",children:"OpenAI Platform"})]}),"\n",(0,s.jsx)(n.li,{children:"Create a new API key"}),"\n",(0,s.jsxs)(n.li,{children:["Copy it to your ",(0,s.jsx)(n.code,{children:".env"})," file"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Verify your MCPHub deployment"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Ensure MCPHub is running on ",(0,s.jsx)(n.code,{children:"http://localhost:8080"})]}),"\n",(0,s.jsx)(n.li,{children:"Verify you have deployed MCPs (e.g., the petstore MCP from the tutorial)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Update MCP URLs"})," in the script:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'mcp_urls = [\n    f"{MCPHUB_BASE_URL}/default/person-rest-oauth/mcp",\n    f"{MCPHUB_BASE_URL}/default/your-other-mcp/mcp",\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"step-5-run-the-demo",children:"Step 5: Run the Demo"}),"\n",(0,s.jsx)(n.p,{children:"Start the interactive demo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python mcphub_langchain_demo.py\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should see output like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\ud83d\ude80 MCPHub + LangChain Integration Demo\n==================================================\n\n\ud83d\udce1 Loading MCP servers...\nLoading: http://localhost:8080/default/person-rest-oauth/mcp\nAdded tool: createPerson\nAdded tool: getPersonByName\nAdded tool: getAllPersons\nAdded tool: getPersonById\nAdded tool: updatePerson\nAdded tool: deletePerson\nSuccessfully loaded 6 tools from http://localhost:8080/default/person-rest-oauth/mcp\n\n\ud83d\udd27 Available Tools:\n  - createPerson: Create a new person record with OAuth 2.0 authentication\n  - getPersonByName: Retrieve a person by their name with OAuth 2.0 authentication\n  - getAllPersons: Retrieve all persons from the system with OAuth 2.0 authentication\n  - getPersonById: Retrieve a specific person by their ID with OAuth 2.0 authentication\n  - updatePerson: Update an existing person record with OAuth 2.0 authentication\n  - deletePerson: Delete a person record with OAuth 2.0 authentication\n\n\ud83e\udd16 Initializing AI agent...\nAgent initialized with 6 tools and system prompt\n\n\u2728 Ready for questions! Type 'quit' to exit.\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-6-test-ai-queries",children:"Step 6: Test AI Queries"}),"\n",(0,s.jsx)(n.p,{children:"Try these example queries:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u2753 Your question: Get all persons from the system\n\n\u2753 Your question: Create a person named Alice with email alice@example.com\n\n\u2753 Your question: Find a person by the name John\n\n\u2753 Your question: Create a person with family information including spouse and children\n"})}),"\n",(0,s.jsx)(n.h2,{id:"sample-output",children:"Sample Output"}),"\n",(0,s.jsx)(n.p,{children:'When you ask "Get all persons from the system", you\'ll see:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\ud83e\udd14 Thinking...\n\n> Entering new AgentExecutor chain...\nI need to retrieve all persons from the system. I should use the GetAllPersons tool.\n\nAction: GetAllPersons\nAction Input: {}\nObservation: {\n  "content": [\n    {\n      "type": "text", \n      "text": "{\\"persons\\":[{\\"name\\":\\"John Doe\\",\\"age\\":30,\\"email\\":\\"john@example.com\\"},{\\"name\\":\\"Jane Smith\\",\\"age\\":25,\\"email\\":\\"jane@example.com\\"}]}"\n    }\n  ]\n}\n\nFinal Answer: I found all persons in the system. Here are the current records:\n\n1. **John Doe**\n   - Age: 30\n   - Email: john@example.com\n\n2. **Jane Smith** \n   - Age: 25\n   - Email: jane@example.com\n\nThe system currently has 2 person records.\n'})}),"\n",(0,s.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsx)(n.h3,{id:"smart-parameter-mapping",children:"Smart Parameter Mapping"}),"\n",(0,s.jsx)(n.p,{children:"The integration automatically maps LangChain's string arguments to the correct MCP tool parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSON Input"}),": If the AI provides structured JSON like ",(0,s.jsx)(n.code,{children:'{"name": "John"}'}),", it's used directly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"String Input"}),": If the AI provides a simple string like ",(0,s.jsx)(n.code,{children:'"John"'}),", it's mapped to the first required parameter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No Parameters"}),": If a tool has no parameters, empty arguments are used"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# AI calls: getPersonByName("John")\n# Mapped to: {"name": "John"}\n\n# AI calls: getPersonById("123") \n# Mapped to: {"personId": "123"}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"closure-issue-fix",children:"Closure Issue Fix"}),"\n",(0,s.jsx)(n.p,{children:"The integration fixes Python closure issues that could cause parameter mapping to use the wrong tool schema:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Fixed: Variables captured by value\ndef create_tool_func(mcp_tool_instance, current_tool_name, current_tool_info):\n    # Each tool gets its own correct schema\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsx)(n.h3,{id:"adding-multiple-mcp-servers",children:"Adding Multiple MCP Servers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Add multiple MCP servers for different functionalities\nmcp_urls = [\n    f"{MCPHUB_BASE_URL}/default/person/mcp",        # Person management\n    f"{MCPHUB_BASE_URL}/default/weather-api/mcp",   # Weather data\n    f"{MCPHUB_BASE_URL}/default/inventory/mcp",     # Inventory operations\n]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-tool-descriptions",children:"Custom Tool Descriptions"}),"\n",(0,s.jsx)(n.p,{children:"Enhance tool descriptions for better AI understanding:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# In your MCP configuration, provide detailed descriptions\n{\n  "name": "CreatePersonWithFamily",\n  "description": "Creates a new person record including their family members with detailed attributes such as names, ages, relationships, and addresses. Requires person name, age, email, and optionally spouse and children information."\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"The demo includes comprehensive error handling:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Network timeouts"}),"\n",(0,s.jsx)(n.li,{children:"MCP protocol errors"}),"\n",(0,s.jsx)(n.li,{children:"OpenAI API errors"}),"\n",(0,s.jsx)(n.li,{children:"Invalid queries"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-tool-descriptions",children:"1. Tool Descriptions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write clear, specific tool descriptions"}),"\n",(0,s.jsx)(n.li,{children:"Include parameter examples"}),"\n",(0,s.jsx)(n.li,{children:"Explain expected return values"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-rate-limiting",children:"2. Rate Limiting"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Be mindful of API rate limits"}),"\n",(0,s.jsx)(n.li,{children:"Implement retry logic for production use"}),"\n",(0,s.jsx)(n.li,{children:"Consider caching for frequently accessed data"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-security",children:"3. Security"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Never commit API keys to version control"}),"\n",(0,s.jsx)(n.li,{children:"Use environment variables"}),"\n",(0,s.jsx)(n.li,{children:"Validate input parameters"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-performance",children:"4. Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load MCP servers once at startup"}),"\n",(0,s.jsx)(n.li,{children:"Use connection pooling for high-volume applications"}),"\n",(0,s.jsx)(n.li,{children:"Monitor tool execution times"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"No tools loaded"'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Verify MCPHub is running"}),"\n",(0,s.jsx)(n.li,{children:"Check MCP server URLs"}),"\n",(0,s.jsx)(n.li,{children:"Ensure MCPs are deployed"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"Network error"'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check MCPHub connectivity"}),"\n",(0,s.jsx)(n.li,{children:"Verify port 8080 is accessible"}),"\n",(0,s.jsx)(n.li,{children:"Check firewall settings"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"OpenAI API error"'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Verify API key is correct"}),"\n",(0,s.jsx)(n.li,{children:"Check API usage limits"}),"\n",(0,s.jsx)(n.li,{children:"Ensure sufficient credits"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"Tool execution failed"'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check MCP server logs"}),"\n",(0,s.jsx)(n.li,{children:"Verify parameter formats"}),"\n",(0,s.jsx)(n.li,{children:"Test tools individually in MCPHub Studio"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,s.jsx)(n.p,{children:"Enable verbose logging:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import logging\nlogging.basicConfig(level=logging.DEBUG)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"example-applications",children:"Example Applications"}),"\n",(0,s.jsx)(n.h3,{id:"hr-management-system",children:"HR Management System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Use person MCP for employee inquiries\nquestion = "Create a new employee record for Sarah Johnson with email sarah@company.com"\nresponse = integration.query(question)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"family-database-management",children:"Family Database Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Create comprehensive family records\nquestion = "Add a new family: John Smith, age 35, with spouse Mary Smith, age 32, and two children: Emma (8) and Alex (12)"\nresponse = integration.query(question)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"contact-management",children:"Contact Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Search and retrieve person information\nquestion = "Find all persons named John and show me their contact details"\nresponse = integration.query(question)\n'})}),"\n",(0,s.jsx)(n.p,{children:"The combination of MCPHub and LangChain provides a powerful foundation for building AI applications that can interact with any REST API through natural language!"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);