"use strict";(self.webpackChunkmcphub_docs=self.webpackChunkmcphub_docs||[]).push([[850],{4247:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"creating-mcps/export-import-config","title":"Export and Import Configuration","description":"MCPHub provides Universal Schema configuration export and import capabilities that allow you to share MCP configurations, create backups, and move configurations between environments or MCPHub instances.","source":"@site/docs/creating-mcps/export-import-config.md","sourceDirName":"creating-mcps","slug":"/creating-mcps/export-import-config","permalink":"/mcphub-docs/docs/latest/creating-mcps/export-import-config","draft":false,"unlisted":false,"editUrl":"https://github.com/mahesh-rajamani/mcphub-docs/tree/main/docs/creating-mcps/export-import-config.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Settings Widget","permalink":"/mcphub-docs/docs/latest/creating-mcps/settings-widget"},"next":{"title":"Versioning and Configuration Merge","permalink":"/mcphub-docs/docs/latest/creating-mcps/versioning-merge"}}');var s=i(4848),t=i(8453);const o={},l="Export and Import Configuration",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Exporting Configurations",id:"exporting-configurations",level:2},{value:"Single Configuration Export",id:"single-configuration-export",level:3},{value:"From Configuration Editor",id:"from-configuration-editor",level:4},{value:"Export Process",id:"export-process",level:4},{value:"Bulk Configuration Export",id:"bulk-configuration-export",level:3},{value:"Multi-Select Export",id:"multi-select-export",level:4},{value:"Export Package Contents",id:"export-package-contents",level:4},{value:"Export Behavior",id:"export-behavior",level:4},{value:"Importing Configurations",id:"importing-configurations",level:2},{value:"Universal Schema JSON Import",id:"universal-schema-json-import",level:3},{value:"Accessing Import Feature",id:"accessing-import-feature",level:4},{value:"Import Methods",id:"import-methods",level:4},{value:"Import Validation",id:"import-validation",level:4},{value:"Import Process",id:"import-process",level:4},{value:"Import Behavior",id:"import-behavior",level:3},{value:"Configuration Creation",id:"configuration-creation",level:4},{value:"Import Results",id:"import-results",level:4},{value:"Configuration Format",id:"configuration-format",level:2},{value:"Universal Schema Structure",id:"universal-schema-structure",level:3},{value:"Required Fields",id:"required-fields",level:3},{value:"Optional Fields",id:"optional-fields",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"export-and-import-configuration",children:"Export and Import Configuration"})}),"\n",(0,s.jsx)(n.p,{children:"MCPHub provides Universal Schema configuration export and import capabilities that allow you to share MCP configurations, create backups, and move configurations between environments or MCPHub instances."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Universal Schema export/import functionality includes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSON Export"}),": Export configurations as Universal Schema JSON files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSON Import"}),": Import existing Universal Schema JSON configurations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bulk Export"}),": Export multiple configurations as a ZIP archive"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"File Upload"}),": Import configurations from JSON files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Environment Migration"}),": Move configurations between different MCPHub instances"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"exporting-configurations",children:"Exporting Configurations"}),"\n",(0,s.jsx)(n.h3,{id:"single-configuration-export",children:"Single Configuration Export"}),"\n",(0,s.jsx)(n.h4,{id:"from-configuration-editor",children:"From Configuration Editor"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Open any MCP configuration in the editor"}),"\n",(0,s.jsx)(n.li,{children:"Copy the JSON content directly from the schema editor"}),"\n",(0,s.jsxs)(n.li,{children:["Save the content to a ",(0,s.jsx)(n.code,{children:".json"})," file"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"export-process",children:"Export Process"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "mcpName": "payment-api",\n  "description": "Payment processing API",\n  "tenantId": "production",\n  "userMetadata": {\n    "version": "1.2.3"\n  },\n  "baseConfigs": {\n    "rest": {\n      "baseUrl": "https://api.example.com",\n      "serviceName": "Payment Service"\n    }\n  },\n  "endpoints": [\n    {\n      "name": "processPayment",\n      "apiType": "rest",\n      "method": "POST",\n      "path": "/payments",\n      "description": "Process a payment transaction"\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"bulk-configuration-export",children:"Bulk Configuration Export"}),"\n",(0,s.jsx)(n.h4,{id:"multi-select-export",children:"Multi-Select Export"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Navigate to the MCP configurations list"}),"\n",(0,s.jsx)(n.li,{children:"Select multiple configurations using checkboxes"}),"\n",(0,s.jsxs)(n.li,{children:["Click the ",(0,s.jsx)(n.strong,{children:"Export X MCPs"})," button"]}),"\n",(0,s.jsx)(n.li,{children:"A ZIP file is automatically downloaded"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"export-package-contents",children:"Export Package Contents"}),"\n",(0,s.jsx)(n.p,{children:"The ZIP file contains:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Individual JSON files for each selected configuration"}),"\n",(0,s.jsxs)(n.li,{children:["Filename format: ",(0,s.jsx)(n.code,{children:"{mcpName}_v{version}.json"})]}),"\n",(0,s.jsxs)(n.li,{children:["Example: ",(0,s.jsx)(n.code,{children:"payment-api_v1.2.3.json"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"export-behavior",children:"Export Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complete Export"}),": All configuration data is exported"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Specific"}),": Each version is exported as a separate file"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No Sensitive Data"}),": User variable values are not included in exports"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tenant Context"}),": Original tenant ID is preserved"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"importing-configurations",children:"Importing Configurations"}),"\n",(0,s.jsx)(n.h3,{id:"universal-schema-json-import",children:"Universal Schema JSON Import"}),"\n",(0,s.jsx)(n.h4,{id:"accessing-import-feature",children:"Accessing Import Feature"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Navigate to the MCP configurations list"}),"\n",(0,s.jsxs)(n.li,{children:["Click the ",(0,s.jsx)(n.strong,{children:"Import Schema"})," button"]}),"\n",(0,s.jsx)(n.li,{children:"The import dialog opens"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"import-methods",children:"Import Methods"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Method 1: Paste JSON Content"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Paste Universal Schema JSON directly into the text area"}),"\n",(0,s.jsx)(n.li,{children:"Review the configuration"}),"\n",(0,s.jsxs)(n.li,{children:["Click ",(0,s.jsx)(n.strong,{children:"Import Schema"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Method 2: Upload JSON File"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Click ",(0,s.jsx)(n.strong,{children:"Upload JSON File"})," button"]}),"\n",(0,s.jsxs)(n.li,{children:["Select a ",(0,s.jsx)(n.code,{children:".json"})," file from your computer"]}),"\n",(0,s.jsx)(n.li,{children:"The file content is loaded into the text area"}),"\n",(0,s.jsxs)(n.li,{children:["Click ",(0,s.jsx)(n.strong,{children:"Import Schema"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"import-validation",children:"Import Validation"}),"\n",(0,s.jsx)(n.p,{children:"The system validates:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSON Format"}),": Valid JSON syntax"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Required Fields"}),": Presence of ",(0,s.jsx)(n.code,{children:"mcpName"})," and ",(0,s.jsx)(n.code,{children:"endpoints"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Duplicate Check"}),": Prevents importing configurations that already exist"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Conflicts"}),": Checks for existing versions with the same name"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"import-process",children:"Import Process"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Example validation and import\n{\n  "validation": {\n    "jsonValid": true,\n    "requiredFields": ["mcpName", "endpoints"],\n    "duplicateCheck": "payment-api v1.2.3 already exists"\n  },\n  "import": {\n    "status": "success",\n    "mcpName": "payment-api-new",\n    "endpointsCreated": 5,\n    "variablesCreated": 3\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"import-behavior",children:"Import Behavior"}),"\n",(0,s.jsx)(n.h4,{id:"configuration-creation",children:"Configuration Creation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"New Configuration"}),": Creates a completely new configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tenant Assignment"}),": Uses current user's tenant context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Preservation"}),": Maintains original version if specified"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complete Import"}),": All endpoints, variables, and settings are imported"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"import-results",children:"Import Results"}),"\n",(0,s.jsx)(n.p,{children:"Upon successful import:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"New configuration appears in the MCP list"}),"\n",(0,s.jsx)(n.li,{children:"Configuration is saved but not deployed"}),"\n",(0,s.jsx)(n.li,{children:"Success message shows import details"}),"\n",(0,s.jsx)(n.li,{children:"Configuration can be immediately edited or deployed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration-format",children:"Configuration Format"}),"\n",(0,s.jsx)(n.h3,{id:"universal-schema-structure",children:"Universal Schema Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "mcpName": "string",\n  "description": "string", \n  "tenantId": "string",\n  "userMetadata": {\n    "version": "string",\n    "category": "string"\n  },\n  "userVariables": [\n    {\n      "name": "string",\n      "description": "string",\n      "type": "string|number|boolean|url|token",\n      "required": boolean,\n      "sensitive": boolean\n    }\n  ],\n  "baseConfigs": {\n    "rest": {\n      "baseUrl": "string",\n      "serviceName": "string",\n      "auth": {\n        "type": "static|jwt|oauth2",\n        "headers": {},\n        "jwtConfig": {},\n        "oauth2Config": {}\n      }\n    },\n    "grpc": {\n      "serverUrl": "string",\n      "serviceName": "string"\n    }\n  },\n  "endpoints": [\n    {\n      "name": "string",\n      "apiType": "rest|grpc",\n      "method": "GET|POST|PUT|DELETE|PATCH",\n      "path": "string",\n      "description": "string",\n      "enabled": boolean,\n      "queryParameters": [],\n      "pathParameters": [],\n      "bodyParameters": []\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"required-fields",children:"Required Fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mcpName"}),": Unique identifier for the MCP"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"endpoints"}),": Array of at least one endpoint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"userMetadata.version"}),": Version identifier (recommended)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"optional-fields",children:"Optional Fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"description"}),": Human-readable description"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"userVariables"}),": Dynamic configuration variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"baseConfigs"}),": Protocol-specific base configurations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tenantId"}),": Tenant context (auto-assigned if missing)"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);