"use strict";(self.webpackChunkmcphub_docs=self.webpackChunkmcphub_docs||[]).push([[196],{4064:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"getting-started/quick-install","title":"Quick Install","description":"Get MCPHub running in under 5 minutes with Docker or Kubernetes.","source":"@site/docs/getting-started/quick-install.md","sourceDirName":"getting-started","slug":"/getting-started/quick-install","permalink":"/mcphub-docs/docs/latest/getting-started/quick-install","draft":false,"unlisted":false,"editUrl":"https://github.com/mahesh-rajamani/mcphub-docs/tree/main/docs/getting-started/quick-install.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/mcphub-docs/docs/latest/getting-started/overview"},"next":{"title":"Your First MCP","permalink":"/mcphub-docs/docs/latest/getting-started/first-mcp"}}');var i=t(4848),r=t(8453);const o={},a="Quick Install",c={},l=[{value:"Docker Installation",id:"docker-installation",level:2},{value:"Option 1: Complete Image (Recommended for Testing)",id:"option-1-complete-image-recommended-for-testing",level:3},{value:"Option 2: Separate Containers (Recommended for Production)",id:"option-2-separate-containers-recommended-for-production",level:3},{value:"1. Start the Backend (MCP Bridge)",id:"1-start-the-backend-mcp-bridge",level:4},{value:"2. Start the Frontend (MCP Studio)",id:"2-start-the-frontend-mcp-studio",level:4},{value:"Option 3: Docker Compose",id:"option-3-docker-compose",level:3},{value:"Optional: Custom Code Engine Setup",id:"optional-custom-code-engine-setup",level:2},{value:"For Separate Container Deployments",id:"for-separate-container-deployments",level:3},{value:"Verification",id:"verification",level:3},{value:"Kubernetes Installation",id:"kubernetes-installation",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Quick Deploy Manifests",id:"quick-deploy-manifests",level:3},{value:"1. Namespace and ConfigMap",id:"1-namespace-and-configmap",level:4},{value:"2. Backend Deployment",id:"2-backend-deployment",level:4},{value:"3. Frontend Deployment",id:"3-frontend-deployment",level:4},{value:"4. Ingress (Optional)",id:"4-ingress-optional",level:4},{value:"Deploy to Kubernetes",id:"deploy-to-kubernetes",level:3},{value:"Verification",id:"verification-1",level:2},{value:"Initial Configuration",id:"initial-configuration",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"quick-install",children:"Quick Install"})}),"\n",(0,i.jsx)(n.p,{children:"Get MCPHub running in under 5 minutes with Docker or Kubernetes."}),"\n",(0,i.jsx)(n.h2,{id:"docker-installation",children:"Docker Installation"}),"\n",(0,i.jsx)(n.h3,{id:"option-1-complete-image-recommended-for-testing",children:"Option 1: Complete Image (Recommended for Testing)"}),"\n",(0,i.jsx)(n.p,{children:"Single container deployment with all components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -p 3000:3000 -p 8080:8080 -p 8082:8082 \\\n  -e MCPHUB_ADMIN_PASSWORD=admin123 \\\n  maheshrajamani/mcphub-all:latest\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Access the application:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MCP Studio (Frontend)"}),": ",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MCP Bridge API"}),": ",(0,i.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Python Engine"}),": ",(0,i.jsx)(n.a,{href:"http://localhost:8082",children:"http://localhost:8082"})," (for custom code tools)"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": No environment variables needed for the frontend! The backend URL is configured through the Settings UI in MCP Studio."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"option-2-separate-containers-recommended-for-production",children:"Option 2: Separate Containers (Recommended for Production)"}),"\n",(0,i.jsx)(n.h4,{id:"1-start-the-backend-mcp-bridge",children:"1. Start the Backend (MCP Bridge)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -d --name mcphub-server \\\n  -p 8080:8080 \\\n  -e MCPHUB_ADMIN_PASSWORD=your_secure_password \\\n  maheshrajamani/mcphub-server:latest\n"})}),"\n",(0,i.jsx)(n.h4,{id:"2-start-the-frontend-mcp-studio",children:"2. Start the Frontend (MCP Studio)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -d --name mcphub-studio \\\n  -p 3000:3000 \\\n  maheshrajamani/mcphub-studio:latest\n"})}),"\n",(0,i.jsx)(n.h3,{id:"option-3-docker-compose",children:"Option 3: Docker Compose"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"docker-compose.yml"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yml"',children:'version: \'3.8\'\n\nservices:\n  mcphub-server:\n    image: maheshrajamani/mcphub-server:latest\n    container_name: mcphub-server\n    ports:\n      - "8080:8080"\n    environment:\n      - MCPHUB_ADMIN_PASSWORD=admin123\n      - QUARKUS_HTTP_HOST=0.0.0.0\n    networks:\n      - mcphub-network\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  mcphub-studio:\n    image: maheshrajamani/mcphub-studio:latest\n    container_name: mcphub-studio\n    ports:\n      - "3000:3000"\n    networks:\n      - mcphub-network\n    depends_on:\n      mcphub-server:\n        condition: service_healthy\n\nnetworks:\n  mcphub-network:\n    driver: bridge\n'})}),"\n",(0,i.jsx)(n.p,{children:"Run with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n",(0,i.jsx)(n.h2,{id:"optional-custom-code-engine-setup",children:"Optional: Custom Code Engine Setup"}),"\n",(0,i.jsx)(n.p,{children:"MCPHub supports custom Python code execution for advanced tool creation. The Python engine is included by default in the complete image."}),"\n",(0,i.jsx)(n.h3,{id:"for-separate-container-deployments",children:"For Separate Container Deployments"}),"\n",(0,i.jsx)(n.p,{children:"If you're using separate containers and want custom code functionality, add the Python engine:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="docker-compose.yml (with Python Engine)"',children:'version: \'3.8\'\n\nservices:\n  mcphub-server:\n    image: maheshrajamani/mcphub-server:latest\n    container_name: mcphub-server\n    ports:\n      - "8080:8080"\n    environment:\n      - MCPHUB_ADMIN_PASSWORD=admin123\n      - QUARKUS_HTTP_HOST=0.0.0.0\n      # Python Engine Configuration\n      - ENGINES_PYTHON_URL=http://python-engine:8082\n      - ENGINES_PYTHON_ENABLED=true\n      - ENGINES_PYTHON_TIMEOUT=30\n    networks:\n      - mcphub-network\n    depends_on:\n      python-engine:\n        condition: service_healthy\n\n  python-engine:\n    image: maheshrajamani/mcphub-python-engine:latest\n    container_name: mcphub-python-engine\n    ports:\n      - "8082:8082"\n    environment:\n      - ENGINE_HOST=0.0.0.0\n      - ENGINE_PORT=8082\n      - LOG_LEVEL=info\n    networks:\n      - mcphub-network\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  mcphub-studio:\n    image: maheshrajamani/mcphub-studio:latest\n    container_name: mcphub-studio\n    ports:\n      - "3000:3000"\n    networks:\n      - mcphub-network\n    depends_on:\n      mcphub-server:\n        condition: service_healthy\n\nnetworks:\n  mcphub-network:\n    driver: bridge\n'})}),"\n",(0,i.jsx)(n.h3,{id:"verification",children:"Verification"}),"\n",(0,i.jsx)(n.p,{children:"Check that the Python engine is working:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check engine status through MCP Bridge\ncurl http://localhost:8080/api/admin/engines/status\n\n# Direct engine health check\ncurl http://localhost:8082/health\n"})}),"\n",(0,i.jsx)(n.h2,{id:"kubernetes-installation",children:"Kubernetes Installation"}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Access to a Kubernetes cluster (local or cloud)"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"kubectl"})," command-line tool installed and configured"]}),"\n",(0,i.jsx)(n.li,{children:"LoadBalancer or Ingress controller (for external access)"}),"\n",(0,i.jsx)(n.li,{children:"Basic familiarity with Kubernetes concepts"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"quick-deploy-manifests",children:"Quick Deploy Manifests"}),"\n",(0,i.jsx)(n.h4,{id:"1-namespace-and-configmap",children:"1. Namespace and ConfigMap"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="k8s-namespace.yaml"',children:'apiVersion: v1\nkind: Namespace\nmetadata:\n  name: mcphub\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mcphub-config\n  namespace: mcphub\ndata:\n  MCPHUB_ADMIN_PASSWORD: "admin123"\n  QUARKUS_HTTP_HOST: "0.0.0.0"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"2-backend-deployment",children:"2. Backend Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="k8s-backend.yaml"',children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcphub-server\n  namespace: mcphub\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: mcphub-server\n  template:\n    metadata:\n      labels:\n        app: mcphub-server\n    spec:\n      containers:\n      - name: mcphub-server\n        image: maheshrajamani/mcphub-server:latest\n        ports:\n        - containerPort: 8080\n        env:\n        - name: MCPHUB_ADMIN_PASSWORD\n          valueFrom:\n            configMapKeyRef:\n              name: mcphub-config\n              key: MCPHUB_ADMIN_PASSWORD\n        - name: QUARKUS_HTTP_HOST\n          valueFrom:\n            configMapKeyRef:\n              name: mcphub-config\n              key: QUARKUS_HTTP_HOST\n        livenessProbe:\n          httpGet:\n            path: /q/health/live\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /q/health/ready\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        resources:\n          requests:\n            memory: "512Mi"\n            cpu: "250m"\n          limits:\n            memory: "1Gi"\n            cpu: "500m"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mcphub-server\n  namespace: mcphub\nspec:\n  selector:\n    app: mcphub-server\n  ports:\n  - port: 8080\n    targetPort: 8080\n  type: ClusterIP\n'})}),"\n",(0,i.jsx)(n.h4,{id:"3-frontend-deployment",children:"3. Frontend Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="k8s-frontend.yaml"',children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcphub-studio\n  namespace: mcphub\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: mcphub-studio\n  template:\n    metadata:\n      labels:\n        app: mcphub-studio\n    spec:\n      containers:\n      - name: mcphub-studio\n        image: maheshrajamani/mcphub-studio:latest\n        ports:\n        - containerPort: 3000\n        # No environment variables needed - configured via Settings UI\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "100m"\n          limits:\n            memory: "512Mi"\n            cpu: "250m"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mcphub-studio\n  namespace: mcphub\nspec:\n  selector:\n    app: mcphub-studio\n  ports:\n  - port: 3000\n    targetPort: 3000\n  type: LoadBalancer\n'})}),"\n",(0,i.jsx)(n.h4,{id:"4-ingress-optional",children:"4. Ingress (Optional)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="k8s-ingress.yaml"',children:"apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: mcphub-ingress\n  namespace: mcphub\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n  - host: mcphub.your-domain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: mcphub-studio\n            port:\n              number: 3000\n      - path: /api\n        pathType: Prefix\n        backend:\n          service:\n            name: mcphub-server\n            port:\n              number: 8080\n"})}),"\n",(0,i.jsx)(n.h3,{id:"deploy-to-kubernetes",children:"Deploy to Kubernetes"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 1: Save the manifests"}),"\nSave each of the YAML configurations above to separate files:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"k8s-namespace.yaml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"k8s-backend.yaml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"k8s-frontend.yaml"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"k8s-ingress.yaml"})," (optional)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 2: Deploy to your cluster"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Deploy all components\nkubectl apply -f k8s-namespace.yaml\nkubectl apply -f k8s-backend.yaml\nkubectl apply -f k8s-frontend.yaml\nkubectl apply -f k8s-ingress.yaml  # Optional\n\n# Check deployment status\nkubectl get pods -n mcphub\n\n# Wait for pods to be ready\nkubectl wait --for=condition=ready pod -l app=mcphub-server -n mcphub --timeout=300s\nkubectl wait --for=condition=ready pod -l app=mcphub-studio -n mcphub --timeout=300s\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 3: Access the application"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Get external IP (for LoadBalancer)\nkubectl get service mcphub-studio -n mcphub\n\n# Or port-forward for local access\nkubectl port-forward service/mcphub-studio 3000:3000 -n mcphub\n"})}),"\n",(0,i.jsx)(n.h2,{id:"verification-1",children:"Verification"}),"\n",(0,i.jsx)(n.p,{children:"After installation, verify everything is working:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Check Health Endpoints"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:8080/q/health\ncurl http://localhost:3000\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Access MCP Studio"}),": Open ",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," in your browser"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create Your First MCP"}),": Follow the ",(0,i.jsx)(n.a,{href:"/mcphub-docs/docs/latest/getting-started/first-mcp",children:"First MCP Guide"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"initial-configuration",children:"Initial Configuration"}),"\n",(0,i.jsx)(n.p,{children:"After installation, you'll need to configure the backend URL in MCP Studio:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Open MCP Studio"}),": Navigate to ",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Open Settings"}),": Click the Settings (\u2699\ufe0f) icon in the top navigation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Configure Backend URL"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For local Docker: ",(0,i.jsx)(n.code,{children:"http://localhost:8080"})]}),"\n",(0,i.jsx)(n.li,{children:"For Kubernetes: Use the appropriate service URL or LoadBalancer IP"}),"\n",(0,i.jsx)(n.li,{children:"For remote deployments: Enter your server's URL"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Save Settings"}),': Click "Save" to persist the configuration']}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udca1 Tip"}),": The settings are stored in your browser's localStorage, so you only need to configure this once per browser."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Container won't start:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check logs\ndocker logs mcphub-server\ndocker logs mcphub-studio\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Can't access the application:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensure ports 3000 and 8080 are not in use"}),"\n",(0,i.jsx)(n.li,{children:"Check firewall settings"}),"\n",(0,i.jsxs)(n.li,{children:["Verify container health with ",(0,i.jsx)(n.code,{children:"docker ps"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Backend connection issues:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Configure backend URL in MCP Studio Settings (\u2699\ufe0f icon)"}),"\n",(0,i.jsx)(n.li,{children:"Check network connectivity between containers"}),"\n",(0,i.jsx)(n.li,{children:"Verify backend is running on port 8080"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For more troubleshooting, see ",(0,i.jsx)(n.a,{href:"../advanced/troubleshooting.md",children:"Advanced Troubleshooting"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);