"use strict";(self.webpackChunkmcphub_docs=self.webpackChunkmcphub_docs||[]).push([[834],{1568:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"creating-mcps/versioning-merge","title":"Versioning and Configuration Merge","description":"MCPHub provides versioning and merge capabilities that enable basic configuration management workflows. This system supports semantic versioning and visual diff/merge operations for configuration management.","source":"@site/docs/creating-mcps/versioning-merge.md","sourceDirName":"creating-mcps","slug":"/creating-mcps/versioning-merge","permalink":"/mcphub-docs/docs/latest/creating-mcps/versioning-merge","draft":false,"unlisted":false,"editUrl":"https://github.com/mahesh-rajamani/mcphub-docs/tree/main/docs/creating-mcps/versioning-merge.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Export and Import Configuration","permalink":"/mcphub-docs/docs/latest/creating-mcps/export-import-config"},"next":{"title":"Deployment Management","permalink":"/mcphub-docs/docs/latest/creating-mcps/deployment-management"}}');var s=i(4848),o=i(8453);const t={},l="Versioning and Configuration Merge",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Version Management",id:"version-management",level:2},{value:"Version Structure",id:"version-structure",level:3},{value:"Creating New Versions",id:"creating-new-versions",level:3},{value:"Automatic Patch Increment",id:"automatic-patch-increment",level:4},{value:"Version Creation Behavior",id:"version-creation-behavior",level:4},{value:"Multiple Version Support",id:"multiple-version-support",level:3},{value:"Version Display",id:"version-display",level:4},{value:"Version Management",id:"version-management-1",level:4},{value:"Configuration Comparison and Merge",id:"configuration-comparison-and-merge",level:2},{value:"Diff Viewer",id:"diff-viewer",level:3},{value:"Accessing the Diff Viewer",id:"accessing-the-diff-viewer",level:4},{value:"Diff Viewer Features",id:"diff-viewer-features",level:4},{value:"Configuration Merging",id:"configuration-merging",level:3},{value:"Creating Merged Configurations",id:"creating-merged-configurations",level:4},{value:"Merge Behavior",id:"merge-behavior",level:4},{value:"Use Cases",id:"use-cases",level:3},{value:"Version Comparison",id:"version-comparison",level:4},{value:"Configuration Consolidation",id:"configuration-consolidation",level:4},{value:"Template Creation",id:"template-creation",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"versioning-and-configuration-merge",children:"Versioning and Configuration Merge"})}),"\n",(0,s.jsx)(n.p,{children:"MCPHub provides versioning and merge capabilities that enable basic configuration management workflows. This system supports semantic versioning and visual diff/merge operations for configuration management."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The versioning and merge system provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Semantic Versioning"}),": Basic semantic versioning with automatic patch increment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multiple Versions"}),": Store multiple versions of the same MCP configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visual Diff Viewer"}),": Compare configurations side-by-side"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration Merging"}),": Create merged configurations from differences"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deployment Management"}),": Deploy specific versions independently"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"version-management",children:"Version Management"}),"\n",(0,s.jsx)(n.h3,{id:"version-structure",children:"Version Structure"}),"\n",(0,s.jsxs)(n.p,{children:["MCPHub uses semantic versioning with the format ",(0,s.jsx)(n.code,{children:"MAJOR.MINOR.PATCH"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Major (1.x.x)"}),": Breaking changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minor (x.1.x)"}),": New features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Patch (x.x.1)"}),": Bug fixes and improvements"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each MCP configuration includes version information in its metadata:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "mcpName": "payment-api",\n  "userMetadata": {\n    "version": "1.2.3"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creating-new-versions",children:"Creating New Versions"}),"\n",(0,s.jsx)(n.h4,{id:"automatic-patch-increment",children:"Automatic Patch Increment"}),"\n",(0,s.jsx)(n.p,{children:"When you create a new version of an existing configuration:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Navigate to the MCP configurations list"}),"\n",(0,s.jsxs)(n.li,{children:["Click the ",(0,s.jsx)(n.strong,{children:"More Actions"})," (\u22ee) button next to the desired MCP"]}),"\n",(0,s.jsxs)(n.li,{children:["Select ",(0,s.jsx)(n.strong,{children:"Create New Version"})," from the dropdown menu"]}),"\n",(0,s.jsx)(n.li,{children:"Confirm the version creation"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The system automatically increments the patch version:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1.0.0"})," \u2192 ",(0,s.jsx)(n.code,{children:"1.0.1"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"1.2.5"})," \u2192 ",(0,s.jsx)(n.code,{children:"1.2.6"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"custom-v1"})," \u2192 ",(0,s.jsx)(n.code,{children:"custom-v1.1"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"version-creation-behavior",children:"Version Creation Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Full Copy"}),": Creates a complete copy of the configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Independent Management"}),": New version can be edited independently"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Same MCP Name"}),": Maintains the same name with different version"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unique Deployment"}),": Only one version can be deployed at a time"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"multiple-version-support",children:"Multiple Version Support"}),"\n",(0,s.jsx)(n.p,{children:"MCPHub supports storing multiple versions of the same MCP:"}),"\n",(0,s.jsx)(n.h4,{id:"version-display",children:"Version Display"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Badges"}),": UI shows version information for each configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multiple Versions Indicator"}),": Badge shown when multiple versions exist"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deployment Status"}),": Clear indication of which version is deployed"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"version-management-1",children:"Version Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Edit Restriction"}),": Cannot edit deployed versions (must undeploy first)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Independent Testing"}),": Each version can be tested independently"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version-Specific Deployment"}),": Deploy any saved version"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration-comparison-and-merge",children:"Configuration Comparison and Merge"}),"\n",(0,s.jsx)(n.h3,{id:"diff-viewer",children:"Diff Viewer"}),"\n",(0,s.jsx)(n.p,{children:"MCPHub provides a visual diff viewer for comparing configurations:"}),"\n",(0,s.jsx)(n.h4,{id:"accessing-the-diff-viewer",children:"Accessing the Diff Viewer"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Navigate to the MCP configurations list"}),"\n",(0,s.jsx)(n.li,{children:"Select exactly 2 configurations using the checkboxes"}),"\n",(0,s.jsxs)(n.li,{children:["Click the ",(0,s.jsx)(n.strong,{children:"Diff & Merge"})," button"]}),"\n",(0,s.jsx)(n.li,{children:"The diff viewer opens in a modal dialog"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"diff-viewer-features",children:"Diff Viewer Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Side-by-Side Comparison"}),": Shows configurations side by side"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSON Highlighting"}),": Syntax highlighting for better readability"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Difference Highlighting"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Red highlighting for removed content"}),"\n",(0,s.jsx)(n.li,{children:"Green highlighting for added content"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Expandable Sections"}),": Collapsible JSON sections for easy navigation"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"configuration-merging",children:"Configuration Merging"}),"\n",(0,s.jsx)(n.h4,{id:"creating-merged-configurations",children:"Creating Merged Configurations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Open the diff viewer with two selected configurations"}),"\n",(0,s.jsx)(n.li,{children:"Review the differences between configurations"}),"\n",(0,s.jsx)(n.li,{children:"Edit the merged configuration in the bottom panel"}),"\n",(0,s.jsx)(n.li,{children:"Provide a new name for the merged configuration"}),"\n",(0,s.jsxs)(n.li,{children:["Click ",(0,s.jsx)(n.strong,{children:"Save Merged Configuration"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"merge-behavior",children:"Merge Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Manual Merging"}),": All merging is done manually by the user"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"New Configuration"}),": Creates a new configuration (doesn't modify originals)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Full JSON Edit"}),": Complete control over the merged configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation"}),": Basic JSON validation before saving"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsx)(n.h4,{id:"version-comparison",children:"Version Comparison"}),"\n",(0,s.jsx)(n.p,{children:"Compare different versions of the same MCP:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Identify changes between versions"}),"\n",(0,s.jsx)(n.li,{children:"Understand evolution of configuration"}),"\n",(0,s.jsx)(n.li,{children:"Review impact of modifications"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"configuration-consolidation",children:"Configuration Consolidation"}),"\n",(0,s.jsx)(n.p,{children:"Merge features from different configurations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Combine endpoints from multiple MCPs"}),"\n",(0,s.jsx)(n.li,{children:"Merge variable definitions"}),"\n",(0,s.jsx)(n.li,{children:"Consolidate authentication configurations"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"template-creation",children:"Template Creation"}),"\n",(0,s.jsx)(n.p,{children:"Create template configurations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Start with existing configurations"}),"\n",(0,s.jsx)(n.li,{children:"Merge common patterns"}),"\n",(0,s.jsx)(n.li,{children:"Create reusable templates"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var r=i(6540);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);