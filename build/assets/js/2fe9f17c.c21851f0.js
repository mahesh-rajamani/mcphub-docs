"use strict";(self.webpackChunkmcphub_docs=self.webpackChunkmcphub_docs||[]).push([[248],{8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var r=s(6540);const o={},t=r.createContext(o);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},9047:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"creating-mcps/import/grpc","title":"Import gRPC Proto","description":"MCPHub can automatically import gRPC service definitions from Protocol Buffer (.proto) files to create MCP configurations for gRPC APIs quickly and accurately.","source":"@site/docs/creating-mcps/import/grpc.md","sourceDirName":"creating-mcps/import","slug":"/creating-mcps/import/grpc","permalink":"/mcphub-docs/docs/latest/creating-mcps/import/grpc","draft":false,"unlisted":false,"editUrl":"https://github.com/mahesh-rajamani/mcphub-docs/tree/main/docs/creating-mcps/import/grpc.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Import OpenAPI Spec","permalink":"/mcphub-docs/docs/latest/creating-mcps/import/openapi"},"next":{"title":"Import REST Endpoint using cURL","permalink":"/mcphub-docs/docs/latest/creating-mcps/import/manual-rest"}}');var o=s(4848),t=s(8453);const i={},l="Import gRPC Proto",c={},a=[{value:"Sample gRPC Service Definition",id:"sample-grpc-service-definition",level:2},{value:"Import Process Overview",id:"import-process-overview",level:2},{value:"Step-by-Step Import Instructions",id:"step-by-step-import-instructions",level:2},{value:"Step 1: Access MCP Studio",id:"step-1-access-mcp-studio",level:3},{value:"Step 2: Import gRPC Protocol Buffer Definition",id:"step-2-import-grpc-protocol-buffer-definition",level:3},{value:"Step 3: Configure gRPC Server Settings",id:"step-3-configure-grpc-server-settings",level:3},{value:"Server Configuration",id:"server-configuration",level:4},{value:"Step 4: Review Imported Configuration",id:"step-4-review-imported-configuration",level:3},{value:"Basic Information Tab",id:"basic-information-tab",level:4},{value:"Protocol Configuration Tab",id:"protocol-configuration-tab",level:4},{value:"Step 5: Explore Imported Endpoints",id:"step-5-explore-imported-endpoints",level:3},{value:"Step 6: Enhance Descriptions with AI Assist",id:"step-6-enhance-descriptions-with-ai-assist",level:3},{value:"Step 7: Create Your MCP Configuration",id:"step-7-create-your-mcp-configuration",level:3},{value:"Step 8: Deploy Your MCP",id:"step-8-deploy-your-mcp",level:3},{value:"Step 9: Test Your gRPC MCP",id:"step-9-test-your-grpc-mcp",level:3},{value:"Sample gRPC Server Implementation",id:"sample-grpc-server-implementation",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Project Structure",id:"project-structure",level:3},{value:"tsconfig.json",id:"tsconfigjson",level:3},{value:"src/types.ts",id:"srctypests",level:3},{value:"src/service.ts",id:"srcservicets",level:3},{value:"src/server.ts",id:"srcserverts",level:3},{value:"package.json scripts",id:"packagejson-scripts",level:3},{value:"Running the gRPC Server",id:"running-the-grpc-server",level:3},{value:"Testing with MCPHub",id:"testing-with-mcphub",level:3},{value:"Sample Test Queries",id:"sample-test-queries",level:3},{value:"Pro Tips",id:"pro-tips",level:2},{value:"TLS Configuration",id:"tls-configuration",level:3},{value:"Server URL Format",id:"server-url-format",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"import-grpc-proto",children:"Import gRPC Proto"})}),"\n",(0,o.jsx)(n.p,{children:"MCPHub can automatically import gRPC service definitions from Protocol Buffer (.proto) files to create MCP configurations for gRPC APIs quickly and accurately."}),"\n",(0,o.jsx)(n.h2,{id:"sample-grpc-service-definition",children:"Sample gRPC Service Definition"}),"\n",(0,o.jsx)(n.p,{children:"Here's a complete Person service example that demonstrates common gRPC patterns:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage person;\n\n// PersonService provides CRUD operations for managing persons\nservice PersonService {\n  // Create a new person in the system\n  rpc CreatePerson(CreatePersonRequest) returns (CreatePersonResponse);\n  \n  // Get a person by their unique name\n  rpc GetPersonByName(GetPersonByNameRequest) returns (GetPersonByNameResponse);\n  \n  // Get a person by their unique ID\n  rpc GetPersonById(GetPersonByIdRequest) returns (GetPersonByIdResponse);\n  \n  // Get all persons with optional pagination\n  rpc GetAllPersons(GetAllPersonsRequest) returns (GetAllPersonsResponse);\n  \n  // Update an existing person\'s information\n  rpc UpdatePerson(UpdatePersonRequest) returns (UpdatePersonResponse);\n  \n  // Delete a person by name\n  rpc DeletePerson(DeletePersonRequest) returns (DeletePersonResponse);\n}\n\n// Person represents an individual in the system\nmessage Person {\n  // Unique identifier for the person (auto-generated if not provided)\n  string id = 1;\n  \n  // Full name of the person (required)\n  string name = 2;\n  \n  // Age of the person in years\n  int32 age = 3;\n  \n  // Email address for contact (must be unique)\n  string email = 4;\n  \n  // Country of residence using ISO country codes\n  string country = 5;\n}\n\n// Request message for creating a new person\nmessage CreatePersonRequest {\n  // Person data to create (id will be auto-generated if not provided)\n  Person person = 1;\n}\n\n// Response message for person creation\nmessage CreatePersonResponse {\n  // The created person with generated ID\n  Person person = 1;\n  \n  // Success message\n  string message = 2;\n}\n\n// Request message for getting a person by name\nmessage GetPersonByNameRequest {\n  // The name to search for (case-sensitive)\n  string name = 1;\n}\n\n// Response message for get person by name\nmessage GetPersonByNameResponse {\n  // The found person, or null if not found\n  Person person = 1;\n  \n  // Whether the person was found\n  bool found = 2;\n}\n\n// Request message for getting a person by ID\nmessage GetPersonByIdRequest {\n  // The unique ID to search for\n  string id = 1;\n}\n\n// Response message for get person by ID\nmessage GetPersonByIdResponse {\n  // The found person, or null if not found\n  Person person = 1;\n  \n  // Whether the person was found\n  bool found = 2;\n}\n\n// Request message for getting all persons\nmessage GetAllPersonsRequest {\n  // Maximum number of persons to return (default: 100)\n  int32 limit = 1;\n  \n  // Number of persons to skip for pagination\n  int32 offset = 2;\n  \n  // Optional country filter\n  string country_filter = 3;\n}\n\n// Response message for get all persons\nmessage GetAllPersonsResponse {\n  // List of persons matching the criteria\n  repeated Person persons = 1;\n  \n  // Total number of persons available\n  int32 total_count = 2;\n  \n  // Whether there are more results available\n  bool has_more = 3;\n}\n\n// Request message for updating a person\nmessage UpdatePersonRequest {\n  // The person data to update (id is required for identification)\n  Person person = 1;\n}\n\n// Response message for person update\nmessage UpdatePersonResponse {\n  // The updated person\n  Person person = 1;\n  \n  // Success message\n  string message = 2;\n}\n\n// Request message for deleting a person\nmessage DeletePersonRequest {\n  // The name of the person to delete\n  string name = 1;\n}\n\n// Response message for person deletion\nmessage DeletePersonResponse {\n  // Whether the deletion was successful\n  bool success = 1;\n  \n  // Success or error message\n  string message = 2;\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"import-process-overview",children:"Import Process Overview"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Open MCP Studio"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:'Click "Create New MCP"'})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:'Click "Import gRPC"'})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Copy/paste your Protocol Buffer specification"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Configure gRPC server settings (URL and TLS)"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Review and enhance the imported configuration"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Create and deploy your MCP"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-by-step-import-instructions",children:"Step-by-Step Import Instructions"}),"\n",(0,o.jsx)(n.h3,{id:"step-1-access-mcp-studio",children:"Step 1: Access MCP Studio"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Open your web browser"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Navigate to your MCP Studio instance"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Verify"}),": You see the MCPHub Studio homepage with available MCPs"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"step-2-import-grpc-protocol-buffer-definition",children:"Step 2: Import gRPC Protocol Buffer Definition"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," the ",(0,o.jsx)(n.strong,{children:'"Create New MCP"'})," button"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," ",(0,o.jsx)(n.strong,{children:'"Import gRPC"'})," button"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Select"})," ",(0,o.jsx)(n.strong,{children:'"Proto Format"'})," tab (should be selected by default)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Copy"})," the Person service proto definition from above"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Paste"})," the proto content into the ",(0,o.jsx)(n.strong,{children:'"Or Paste Proto Content"'})," textarea"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," ",(0,o.jsx)(n.strong,{children:'"Configure Import"'})," button"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"step-3-configure-grpc-server-settings",children:"Step 3: Configure gRPC Server Settings"}),"\n",(0,o.jsx)(n.p,{children:'After clicking "Configure Import", you\'ll see the gRPC configuration step:'}),"\n",(0,o.jsx)(n.h4,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"gRPC Server URL"}),": Enter your gRPC server URL (e.g., ",(0,o.jsx)(n.code,{children:"localhost:50051"})," or ",(0,o.jsx)(n.code,{children:"grpc.example.com:443"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"TLS Enabled"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\u2705 ",(0,o.jsx)(n.strong,{children:"Important"}),": Set to ",(0,o.jsx)(n.code,{children:"false"})," for local development servers"]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Set to ",(0,o.jsx)(n.code,{children:"true"})," for production servers with TLS certificates"]}),"\n",(0,o.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,o.jsx)(n.strong,{children:"Known Issue"}),": Currently defaults to ",(0,o.jsx)(n.code,{children:"true"})," - make sure to change this for local servers"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," ",(0,o.jsx)(n.strong,{children:'"Import & Preview"'})," to proceed"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Note: The TLS setting is crucial - local gRPC servers typically run without TLS, while production servers use TLS."})}),"\n",(0,o.jsx)(n.h3,{id:"step-4-review-imported-configuration",children:"Step 4: Review Imported Configuration"}),"\n",(0,o.jsx)(n.p,{children:"After configuration, you'll see the MCP configuration form pre-filled:"}),"\n",(0,o.jsx)(n.h4,{id:"basic-information-tab",children:"Basic Information Tab"}),"\n",(0,o.jsx)(n.p,{children:"Review the automatically filled fields:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"MCP Name"}),": ",(0,o.jsx)(n.code,{children:"person-service"})," (auto-generated from service name)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Description"}),": ",(0,o.jsx)(n.code,{children:"PersonService provides CRUD operations for managing persons"})," (from proto comments)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Version"}),": ",(0,o.jsx)(n.code,{children:"1.0.0"})," (default)"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"protocol-configuration-tab",children:"Protocol Configuration Tab"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," the ",(0,o.jsx)(n.strong,{children:'"Protocol Basic Info"'})," tab"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Verify"})," the gRPC server URL and TLS settings"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Check"})," any additional headers if needed"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"step-5-explore-imported-endpoints",children:"Step 5: Explore Imported Endpoints"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Click"})," the ",(0,o.jsx)(n.strong,{children:'"Endpoints"'})," tab"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Review"})," the imported RPC methods (you should see 6 person service methods):"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CreatePerson"}),": Create a new person"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"GetPersonByName"}),": Get person by name"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"GetPersonById"}),": Get person by unique ID"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"GetAllPersons"}),": Get all persons with pagination"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"UpdatePerson"}),": Update person information"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"DeletePerson"}),": Delete person by name"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Click"})," on ",(0,o.jsx)(n.strong,{children:'"CreatePerson"'})," method to examine it"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Notice"})," the following details:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Method"}),": ",(0,o.jsx)(n.code,{children:"CreatePerson"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Package"}),": ",(0,o.jsx)(n.code,{children:"person.PersonService"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Description"}),": Create a new person in the system"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Request Message"}),": ",(0,o.jsx)(n.code,{children:"CreatePersonRequest"})," with Person object"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Response Message"}),": ",(0,o.jsx)(n.code,{children:"CreatePersonResponse"})," with created Person"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"step-6-enhance-descriptions-with-ai-assist",children:"Step 6: Enhance Descriptions with AI Assist"}),"\n",(0,o.jsx)(n.p,{children:"MCPHub includes AI-powered features to improve gRPC method descriptions:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," on any RPC method in the ",(0,o.jsx)(n.strong,{children:'"Endpoints"'})," tab"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Look"})," for the ",(0,o.jsx)(n.strong,{children:"\u2728\u2728 (double sparkle)"})," icon next to description fields"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," the ",(0,o.jsx)(n.strong,{children:"\u2728\u2728"})," button to get AI-generated suggestions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Review"})," and apply suggestions for better tool calling performance"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"step-7-create-your-mcp-configuration",children:"Step 7: Create Your MCP Configuration"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Review"})," your configuration one final time"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," the ",(0,o.jsx)(n.strong,{children:'"Create MCP"'})," button"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Wait"})," for the success confirmation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Verify"}),": You're redirected to the MCP list with your new gRPC configuration"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"step-8-deploy-your-mcp",children:"Step 8: Deploy Your MCP"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," the ",(0,o.jsx)(n.strong,{children:'"Deploy"'})," button"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Configure deployment settings"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Environment"}),": Select ",(0,o.jsx)(n.code,{children:"Development"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Target"}),": Keep default bridge URL"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," ",(0,o.jsx)(n.strong,{children:'"Deploy Now"'})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Note"}),": Your MCP is now live and ready for testing"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"step-9-test-your-grpc-mcp",children:"Step 9: Test Your gRPC MCP"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click"})," the ",(0,o.jsx)(n.strong,{children:'"Test MCP"'})," button"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"In the test interface"}),", verify:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Available Tools"}),": Shows list of 6 gRPC methods"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tool count"}),": 6 tools available"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Test a method"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Select ",(0,o.jsx)(n.strong,{children:'"CreatePerson"'})," tool"]}),"\n",(0,o.jsx)(n.li,{children:"Fill in person data (name, age, email, country)"}),"\n",(0,o.jsx)(n.li,{children:"Execute and see the gRPC response"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"sample-grpc-server-implementation",children:"Sample gRPC Server Implementation"}),"\n",(0,o.jsx)(n.p,{children:"Here's a complete Node.js/TypeScript implementation of the Person service for local testing:"}),"\n",(0,o.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.p,{children:"Install required dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm init -y\nnpm install @grpc/grpc-js @grpc/proto-loader typescript @types/node\nnpm install -D ts-node nodemon\n"})}),"\n",(0,o.jsx)(n.h3,{id:"project-structure",children:"Project Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"person-grpc-server/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 proto/\n\u2502   \u2514\u2500\u2500 person.proto\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 server.ts\n\u2502   \u251c\u2500\u2500 service.ts\n\u2502   \u2514\u2500\u2500 types.ts\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,o.jsx)(n.h3,{id:"tsconfigjson",children:"tsconfig.json"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "ES2020",\n    "module": "commonjs",\n    "outDir": "./dist",\n    "rootDir": "./src",\n    "strict": true,\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true,\n    "resolveJsonModule": true\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules", "dist"]\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"srctypests",children:"src/types.ts"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// TypeScript interfaces for our Person service\nexport interface Person {\n  id: string;\n  name: string;\n  age: number;\n  email: string;\n  country: string;\n}\n\nexport interface CreatePersonRequest {\n  person: Omit<Person, 'id'>;\n}\n\nexport interface CreatePersonResponse {\n  person: Person;\n  message: string;\n}\n\nexport interface GetPersonByNameRequest {\n  name: string;\n}\n\nexport interface GetPersonByNameResponse {\n  person?: Person;\n  found: boolean;\n}\n\nexport interface GetPersonByIdRequest {\n  id: string;\n}\n\nexport interface GetPersonByIdResponse {\n  person?: Person;\n  found: boolean;\n}\n\nexport interface GetAllPersonsRequest {\n  limit?: number;\n  offset?: number;\n  country_filter?: string;\n}\n\nexport interface GetAllPersonsResponse {\n  persons: Person[];\n  total_count: number;\n  has_more: boolean;\n}\n\nexport interface UpdatePersonRequest {\n  person: Person;\n}\n\nexport interface UpdatePersonResponse {\n  person: Person;\n  message: string;\n}\n\nexport interface DeletePersonRequest {\n  name: string;\n}\n\nexport interface DeletePersonResponse {\n  success: boolean;\n  message: string;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"srcservicets",children:"src/service.ts"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { Person, CreatePersonRequest, CreatePersonResponse, GetPersonByNameRequest, GetPersonByNameResponse, GetPersonByIdRequest, GetPersonByIdResponse, GetAllPersonsRequest, GetAllPersonsResponse, UpdatePersonRequest, UpdatePersonResponse, DeletePersonRequest, DeletePersonResponse } from './types';\n\n// In-memory storage for demo purposes\nconst persons: Map<string, Person> = new Map();\n\n// Sample data\nconst samplePersons: Person[] = [\n  {\n    id: '1',\n    name: 'John Doe',\n    age: 30,\n    email: 'john.doe@example.com',\n    country: 'US'\n  },\n  {\n    id: '2', \n    name: 'Jane Smith',\n    age: 25,\n    email: 'jane.smith@example.com',\n    country: 'CA'\n  },\n  {\n    id: '3',\n    name: 'Bob Johnson',\n    age: 35,\n    email: 'bob.johnson@example.com', \n    country: 'UK'\n  }\n];\n\n// Initialize with sample data\nsamplePersons.forEach(person => {\n  persons.set(person.id, person);\n});\n\n// Service implementation\nexport const PersonService = {\n  CreatePerson: (call: any, callback: any) => {\n    try {\n      const request: CreatePersonRequest = call.request;\n      \n      // Validate required fields\n      if (!request.person?.name || !request.person?.email) {\n        return callback({\n          code: 3, // INVALID_ARGUMENT\n          message: 'Name and email are required'\n        });\n      }\n      \n      // Check for duplicate email\n      const existingPerson = Array.from(persons.values()).find(p => p.email === request.person.email);\n      if (existingPerson) {\n        return callback({\n          code: 6, // ALREADY_EXISTS\n          message: 'Person with this email already exists'\n        });\n      }\n      \n      // Create new person\n      const newPerson: Person = {\n        id: request.person.id || Date.now().toString(),\n        name: request.person.name,\n        age: request.person.age || 0,\n        email: request.person.email,\n        country: request.person.country || ''\n      };\n      \n      persons.set(newPerson.id, newPerson);\n      \n      const response: CreatePersonResponse = {\n        person: newPerson,\n        message: 'Person created successfully'\n      };\n      \n      callback(null, response);\n    } catch (error) {\n      callback({\n        code: 13, // INTERNAL\n        message: 'Internal server error'\n      });\n    }\n  },\n\n  GetPersonByName: (call: any, callback: any) => {\n    try {\n      const request: GetPersonByNameRequest = call.request;\n      const person = Array.from(persons.values()).find(p => p.name === request.name);\n      \n      const response: GetPersonByNameResponse = {\n        person: person || undefined,\n        found: !!person\n      };\n      \n      callback(null, response);\n    } catch (error) {\n      callback({\n        code: 13,\n        message: 'Internal server error'\n      });\n    }\n  },\n\n  GetPersonById: (call: any, callback: any) => {\n    try {\n      const request: GetPersonByIdRequest = call.request;\n      const person = persons.get(request.id);\n      \n      const response: GetPersonByIdResponse = {\n        person: person || undefined,\n        found: !!person\n      };\n      \n      callback(null, response);\n    } catch (error) {\n      callback({\n        code: 13,\n        message: 'Internal server error'\n      });\n    }\n  },\n\n  GetAllPersons: (call: any, callback: any) => {\n    try {\n      const request: GetAllPersonsRequest = call.request;\n      const limit = request.limit || 100;\n      const offset = request.offset || 0;\n      const countryFilter = request.country_filter;\n      \n      let allPersons = Array.from(persons.values());\n      \n      // Apply country filter if provided\n      if (countryFilter) {\n        allPersons = allPersons.filter(p => p.country.toLowerCase() === countryFilter.toLowerCase());\n      }\n      \n      // Sort by name for consistent ordering\n      allPersons.sort((a, b) => a.name.localeCompare(b.name));\n      \n      const total = allPersons.length;\n      const paginatedPersons = allPersons.slice(offset, offset + limit);\n      \n      const response: GetAllPersonsResponse = {\n        persons: paginatedPersons,\n        total_count: total,\n        has_more: offset + limit < total\n      };\n      \n      callback(null, response);\n    } catch (error) {\n      callback({\n        code: 13,\n        message: 'Internal server error'\n      });\n    }\n  },\n\n  UpdatePerson: (call: any, callback: any) => {\n    try {\n      const request: UpdatePersonRequest = call.request;\n      \n      if (!request.person?.id) {\n        return callback({\n          code: 3,\n          message: 'Person ID is required for update'\n        });\n      }\n      \n      const existingPerson = persons.get(request.person.id);\n      if (!existingPerson) {\n        return callback({\n          code: 5, // NOT_FOUND\n          message: 'Person not found'\n        });\n      }\n      \n      // Update person\n      const updatedPerson: Person = {\n        ...existingPerson,\n        ...request.person,\n        id: existingPerson.id // Ensure ID doesn't change\n      };\n      \n      persons.set(updatedPerson.id, updatedPerson);\n      \n      const response: UpdatePersonResponse = {\n        person: updatedPerson,\n        message: 'Person updated successfully'\n      };\n      \n      callback(null, response);\n    } catch (error) {\n      callback({\n        code: 13,\n        message: 'Internal server error'\n      });\n    }\n  },\n\n  DeletePerson: (call: any, callback: any) => {\n    try {\n      const request: DeletePersonRequest = call.request;\n      const person = Array.from(persons.values()).find(p => p.name === request.name);\n      \n      if (!person) {\n        const response: DeletePersonResponse = {\n          success: false,\n          message: 'Person not found'\n        };\n        return callback(null, response);\n      }\n      \n      persons.delete(person.id);\n      \n      const response: DeletePersonResponse = {\n        success: true,\n        message: 'Person deleted successfully'\n      };\n      \n      callback(null, response);\n    } catch (error) {\n      callback({\n        code: 13,\n        message: 'Internal server error'\n      });\n    }\n  }\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"srcserverts",children:"src/server.ts"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import * as grpc from '@grpc/grpc-js';\nimport * as protoLoader from '@grpc/proto-loader';\nimport { PersonService } from './service';\nimport path from 'path';\n\n// Load the protobuf definition\nconst PROTO_PATH = path.join(__dirname, '../proto/person.proto');\n\nconst packageDefinition = protoLoader.loadSync(PROTO_PATH, {\n  keepCase: true,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true,\n});\n\nconst personProto = grpc.loadPackageDefinition(packageDefinition).person as any;\n\n// Create and start the server\nfunction startServer() {\n  const server = new grpc.Server();\n  \n  // Add the PersonService implementation\n  server.addService(personProto.PersonService.service, PersonService);\n  \n  const serverAddress = '0.0.0.0:50051';\n  \n  server.bindAsync(\n    serverAddress,\n    grpc.ServerCredentials.createInsecure(), // No TLS for local development\n    (error, port) => {\n      if (error) {\n        console.error('Failed to start server:', error);\n        return;\n      }\n      \n      console.log(`\ud83d\ude80 gRPC Server started successfully!`);\n      console.log(`\ud83d\udce1 Server listening on ${serverAddress}`);\n      console.log(`\ud83d\udd27 TLS: Disabled (perfect for MCPHub testing)`);\n      console.log(`\ud83d\udcdd Available services:`);\n      console.log(`   - person.PersonService`);\n      console.log(`\ud83d\udccb Available methods:`);\n      console.log(`   - CreatePerson`);\n      console.log(`   - GetPersonByName`);\n      console.log(`   - GetPersonById`);\n      console.log(`   - GetAllPersons`);\n      console.log(`   - UpdatePerson`);\n      console.log(`   - DeletePerson`);\n      console.log(`\\n\ud83c\udfaf Ready for MCPHub import!`);\n      console.log(`   Server URL: localhost:50051`);\n      console.log(`   TLS Enabled: false`);\n      \n      server.start();\n    }\n  );\n}\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('\\n\ud83d\uded1 Shutting down gRPC server...');\n  process.exit(0);\n});\n\n// Start the server\nstartServer();\n"})}),"\n",(0,o.jsx)(n.h3,{id:"packagejson-scripts",children:"package.json scripts"}),"\n",(0,o.jsxs)(n.p,{children:["Add these scripts to your ",(0,o.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "dev": "ts-node src/server.ts",\n    "build": "tsc",\n    "start": "node dist/server.js",\n    "watch": "nodemon --exec ts-node src/server.ts"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"running-the-grpc-server",children:"Running the gRPC Server"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Save the proto file"}),": Create ",(0,o.jsx)(n.code,{children:"proto/person.proto"})," with the proto definition from above"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Install dependencies"}),":","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Start the server"}),":","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Verify server is running"}),": You should see:","\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\ud83d\ude80 gRPC Server started successfully!\n\ud83d\udce1 Server listening on 0.0.0.0:50051\n\ud83d\udd27 TLS: Disabled (perfect for MCPHub testing)\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"testing-with-mcphub",children:"Testing with MCPHub"}),"\n",(0,o.jsx)(n.p,{children:"Once your gRPC server is running:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Import into MCPHub"})," using the proto definition above"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Configure server settings"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Server URL"}),": ",(0,o.jsx)(n.code,{children:"localhost:50051"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"TLS Enabled"}),": ",(0,o.jsx)(n.code,{children:"false"})," \u26a0\ufe0f ",(0,o.jsx)(n.strong,{children:"Important!"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Test the methods"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CreatePerson"}),": Create new persons"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"GetAllPersons"}),": See the 3 sample persons"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"GetPersonByName"}),': Find "John Doe", "Jane Smith", or "Bob Johnson"']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"GetPersonById"}),': Search by ID "1", "2", or "3"']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"sample-test-queries",children:"Sample Test Queries"}),"\n",(0,o.jsx)(n.p,{children:"Try these in MCPHub's test interface:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'"Create a new person named Alice Cooper, age 28, email alice@example.com, from Australia"\n\n"Find the person named John Doe"\n\n"Get all persons from the US"\n\n"Find the person with ID 1"\n\n"Update John Doe\'s age to 31"\n\n"Delete the person named Bob Johnson"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"pro-tips",children:"Pro Tips"}),"\n",(0,o.jsx)(n.h3,{id:"tls-configuration",children:"TLS Configuration"}),"\n",(0,o.jsx)(n.p,{children:"When configuring your gRPC server settings during import:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\u2705 Set TLS to ",(0,o.jsx)(n.code,{children:"false"})," for local development servers"]}),"\n",(0,o.jsxs)(n.li,{children:["\u2705 Set TLS to ",(0,o.jsx)(n.code,{children:"true"})," for production servers with proper certificates"]}),"\n",(0,o.jsx)(n.li,{children:"\u26a0\ufe0f Double-check the TLS setting if you encounter connection errors"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"server-url-format",children:"Server URL Format"}),"\n",(0,o.jsx)(n.p,{children:"Use these URL formats for best results:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Local"}),": ",(0,o.jsx)(n.code,{children:"localhost:50051"})," or ",(0,o.jsx)(n.code,{children:"127.0.0.1:50051"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Remote"}),": ",(0,o.jsx)(n.code,{children:"grpc.example.com:443"})," or ",(0,o.jsx)(n.code,{children:"api.example.com:9090"})]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);