"use strict";(self.webpackChunkmcphub_docs=self.webpackChunkmcphub_docs||[]).push([[919],{939:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"creating-mcps/import/custom-code","title":"Custom Code as Tool","description":"Create custom tools using Python code that execute within MCPHub\'s secure sandbox environment.","source":"@site/docs/creating-mcps/import/custom-code.md","sourceDirName":"creating-mcps/import","slug":"/creating-mcps/import/custom-code","permalink":"/mcphub-docs/docs/latest/creating-mcps/import/custom-code","draft":false,"unlisted":false,"editUrl":"https://github.com/mahesh-rajamani/mcphub-docs/tree/main/docs/creating-mcps/import/custom-code.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Import REST Endpoint using cURL","permalink":"/mcphub-docs/docs/latest/creating-mcps/import/manual-rest"},"next":{"title":"User Variables","permalink":"/mcphub-docs/docs/latest/creating-mcps/variables/overview"}}');var t=i(4848),r=i(8453);const o={},l="Custom Code as Tool",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Backend Configuration",id:"backend-configuration",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Docker Deployment",id:"docker-deployment",level:3},{value:"Health Check",id:"health-check",level:3},{value:"Creating Custom Code Tools",id:"creating-custom-code-tools",level:2},{value:"1. Select Custom API Type",id:"1-select-custom-api-type",level:3},{value:"2. Add Custom Code Tool",id:"2-add-custom-code-tool",level:3},{value:"3. Configure Input Parameters",id:"3-configure-input-parameters",level:3},{value:"4. Configure Output Parameters",id:"4-configure-output-parameters",level:3},{value:"5. Write Python Code",id:"5-write-python-code",level:3},{value:"Python Code Guidelines",id:"python-code-guidelines",level:2},{value:"Function Structure",id:"function-structure",level:3},{value:"Available Libraries",id:"available-libraries",level:3},{value:"Security Considerations",id:"security-considerations",level:3},{value:"User Variables in Custom Tools",id:"user-variables-in-custom-tools",level:2},{value:"In Input Parameters",id:"in-input-parameters",level:3},{value:"In Code",id:"in-code",level:3},{value:"Example",id:"example",level:3},{value:"Testing Custom Tools",id:"testing-custom-tools",level:2},{value:"Local Testing",id:"local-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Combining with Other APIs",id:"combining-with-other-apis",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"custom-code-as-tool",children:"Custom Code as Tool"})}),"\n",(0,t.jsx)(n.p,{children:"Create custom tools using Python code that execute within MCPHub's secure sandbox environment."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Custom code tools allow you to create specialized functionality using Python code that runs in a dedicated execution engine. These tools can be used alongside REST, gRPC, and other API services within the same MCP configuration."}),"\n",(0,t.jsx)(n.p,{children:"The Custom API type is specifically designed for MCPs that primarily use custom code tools but can be combined with traditional API endpoints for hybrid solutions."}),"\n",(0,t.jsx)(n.h2,{id:"backend-configuration",children:"Backend Configuration"}),"\n",(0,t.jsx)(n.p,{children:"For deployed MCPHub services, ensure the Python engine is properly configured and accessible."}),"\n",(0,t.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsx)(n.p,{children:"Configure these environment variables for the MCP Bridge backend:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Python Engine Connection\nENGINES_PYTHON_URL=http://python-engine:8082\nENGINES_PYTHON_ENABLED=true\nENGINES_PYTHON_TIMEOUT=30\n"})}),"\n",(0,t.jsx)(n.h3,{id:"docker-deployment",children:"Docker Deployment"}),"\n",(0,t.jsx)(n.p,{children:"When using Docker Compose, the Python engine runs as a separate service:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# Python engine is automatically included in docker-compose.yml\nservices:\n  python-engine:\n    image: maheshrajamani/mcphub-python-engine:latest\n    ports:\n      - "8082:8082"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"health-check",children:"Health Check"}),"\n",(0,t.jsx)(n.p,{children:"Verify the Python engine is running:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check engine status through MCP Bridge\ncurl http://localhost:8080/api/admin/engines/status\n\n# Direct engine health check\ncurl http://localhost:8082/health\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-custom-code-tools",children:"Creating Custom Code Tools"}),"\n",(0,t.jsx)(n.h3,{id:"1-select-custom-api-type",children:"1. Select Custom API Type"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Open MCP Studio"}),"\n",(0,t.jsx)(n.li,{children:"Create a new MCP or edit an existing one"}),"\n",(0,t.jsxs)(n.li,{children:["In the ",(0,t.jsx)(n.strong,{children:"API Types"})," section, select ",(0,t.jsx)(n.strong,{children:"Custom"})," from the dropdown"]}),"\n",(0,t.jsx)(n.li,{children:"Configure the service name for your custom tools"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-add-custom-code-tool",children:"2. Add Custom Code Tool"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Scroll to the ",(0,t.jsx)(n.strong,{children:"Tools"})," section"]}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Add Tools"})," \u2192 ",(0,t.jsx)(n.strong,{children:"Custom Code Tool"})]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the tool parameters:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tool Name"}),": Unique identifier (e.g., ",(0,t.jsx)(n.code,{children:"calculate_metrics"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Clear explanation of what the tool does"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Engine Type"}),": Python 3.11 (automatic)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enabled"}),": Toggle to expose the tool to AI models"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-configure-input-parameters",children:"3. Configure Input Parameters"}),"\n",(0,t.jsx)(n.p,{children:"Define the parameters your Python code will receive:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Switch to the ",(0,t.jsx)(n.strong,{children:"Input Parameters"})," tab"]}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Add Input Parameter"})," for each parameter"]}),"\n",(0,t.jsxs)(n.li,{children:["Configure each parameter:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name"}),": Parameter name used in your Python code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": string, number, boolean, array, or object"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Required"}),": Whether the parameter is mandatory"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": What this parameter represents"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Default Value"}),": Optional default value or user variable"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-configure-output-parameters",children:"4. Configure Output Parameters"}),"\n",(0,t.jsx)(n.p,{children:"Define what your Python code will return:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Switch to the ",(0,t.jsx)(n.strong,{children:"Output Parameters"})," tab"]}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Add Output Parameter"})," for each return value"]}),"\n",(0,t.jsxs)(n.li,{children:["Configure each output:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name"}),": Output field name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type"}),": Data type of the returned value"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": What this output represents"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"5-write-python-code",children:"5. Write Python Code"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["In the ",(0,t.jsx)(n.strong,{children:"Python Code"})," section, click ",(0,t.jsx)(n.strong,{children:"Generate Method Signature"})," to create a template"]}),"\n",(0,t.jsx)(n.li,{children:"Write your custom logic within the generated function"}),"\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.strong,{children:"AI Code Suggest"})," button for AI-powered code completion"]}),"\n",(0,t.jsxs)(n.li,{children:["Test your code using the ",(0,t.jsx)(n.strong,{children:"Test"})," button"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"python-code-guidelines",children:"Python Code Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"function-structure",children:"Function Structure"}),"\n",(0,t.jsx)(n.p,{children:"Your Python code should follow this pattern:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def execute(param1: str, param2: int = 10) -> dict:\n    """\n    Tool description goes here.\n    \n    Args:\n        param1: Description of first parameter\n        param2: Description of second parameter with default\n        \n    Returns:\n        Dictionary with output parameters as defined in UI\n    """\n    # Your custom logic here\n    result = perform_calculation(param1, param2)\n    \n    # Return dictionary matching your configured output parameters\n    return {\n        "result": result,\n        "status": "completed"\n    }\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important"}),": The return dictionary must exactly match the output parameters you configured in the UI. Each key in the returned dictionary should correspond to an output parameter name you defined."]}),"\n",(0,t.jsx)(n.h3,{id:"available-libraries",children:"Available Libraries"}),"\n",(0,t.jsx)(n.p,{children:"The Python execution environment includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Built-in modules"}),": ",(0,t.jsx)(n.code,{children:"json"}),", ",(0,t.jsx)(n.code,{children:"datetime"}),", ",(0,t.jsx)(n.code,{children:"os"}),", ",(0,t.jsx)(n.code,{children:"sys"}),", ",(0,t.jsx)(n.code,{children:"base64"}),", ",(0,t.jsx)(n.code,{children:"uuid"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HTTP clients"}),": ",(0,t.jsx)(n.code,{children:"requests"}),", ",(0,t.jsx)(n.code,{children:"httpx"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data processing"}),": ",(0,t.jsx)(n.code,{children:"json5"}),", ",(0,t.jsx)(n.code,{children:"python-dateutil"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Standard exceptions"}),": ",(0,t.jsx)(n.code,{children:"ValueError"}),", ",(0,t.jsx)(n.code,{children:"TypeError"}),", ",(0,t.jsx)(n.code,{children:"RuntimeError"}),", ",(0,t.jsx)(n.code,{children:"KeyError"}),", ",(0,t.jsx)(n.code,{children:"ConnectionError"}),", ",(0,t.jsx)(n.code,{children:"TimeoutError"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Code runs in a sandboxed environment with ",(0,t.jsx)(n.code,{children:"RestrictedPython"})]}),"\n",(0,t.jsx)(n.li,{children:"Network access is limited to HTTP/HTTPS requests"}),"\n",(0,t.jsx)(n.li,{children:"File system access is restricted"}),"\n",(0,t.jsx)(n.li,{children:"Execution timeout is enforced (30 seconds default)"}),"\n",(0,t.jsx)(n.li,{children:"Memory usage is monitored and limited"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"user-variables-in-custom-tools",children:"User Variables in Custom Tools"}),"\n",(0,t.jsx)(n.p,{children:"Custom tools support user variables for dynamic configuration:"}),"\n",(0,t.jsx)(n.h3,{id:"in-input-parameters",children:"In Input Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Set default values using ",(0,t.jsx)(n.code,{children:"{{variableName}}"})," syntax"]}),"\n",(0,t.jsx)(n.li,{children:"Variables are resolved at runtime from environment or user settings"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"in-code",children:"In Code"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Access resolved values through function parameters"}),"\n",(0,t.jsx)(n.li,{children:"No direct variable substitution in code - use parameters instead"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def execute(api_key: str = "{{userApiKey}}", endpoint: str = "{{serviceEndpoint}}") -> dict:\n    # api_key and endpoint will contain resolved variable values\n    response = requests.get(f"{endpoint}/data", headers={"Authorization": f"Bearer {api_key}"})\n    return {"data": response.json()}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"testing-custom-tools",children:"Testing Custom Tools"}),"\n",(0,t.jsx)(n.h3,{id:"local-testing",children:"Local Testing"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.strong,{children:"Test"})," button in the code editor"]}),"\n",(0,t.jsx)(n.li,{children:"Provide sample input values"}),"\n",(0,t.jsx)(n.li,{children:"Review execution results and logs"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Deploy your MCP configuration"}),"\n",(0,t.jsx)(n.li,{children:"Test the tool through the MCP protocol endpoint"}),"\n",(0,t.jsx)(n.li,{children:"Monitor logs in the Python engine for debugging"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"combining-with-other-apis",children:"Combining with Other APIs"}),"\n",(0,t.jsx)(n.p,{children:"Custom code tools work seamlessly with other API types:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"REST + Custom"}),": Use REST for standard operations, custom code for complex logic"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"gRPC + Custom"}),": Combine type-safe gRPC calls with custom data processing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multiple API Types"}),": Single MCP can expose REST endpoints, gRPC services, and custom tools"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);